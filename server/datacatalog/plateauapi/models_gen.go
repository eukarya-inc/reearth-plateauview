// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package plateauapi

import (
	"fmt"
	"io"
	"strconv"
)

type Area interface {
	Node
	IsArea()
}

type Dataset interface {
	Node
	IsDataset()
}

type DatasetDatum interface {
	Node
	IsDatasetDatum()
}

type DatasetType interface {
	Node
	IsDatasetType()
}

type Node interface {
	IsNode()
}

type AreaQuery struct {
	ParentCode   string   `json:"parentCode"`
	DatasetTypes []string `json:"datasetTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type Country struct {
	ID          string        `json:"id"`
	Code        string        `json:"code"`
	Name        string        `json:"name"`
	Parents     []Area        `json:"parents"`
	Prefectures []*Prefecture `json:"prefectures"`
	Datasets    []Dataset     `json:"datasets"`
}

func (Country) IsArea() {}
func (Country) IsNode() {}

type DatasetForAreaQuery struct {
	ExcludeTypes []string `json:"excludeTypes"`
	IncludeTypes []string `json:"includeTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type DatasetQuery struct {
	AreaCodes    []string `json:"areaCodes"`
	ExcludeTypes []string `json:"excludeTypes"`
	IncludeTypes []string `json:"includeTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type DatasetTypeQuery struct {
	Category       *DatasetTypeCategory `json:"category"`
	PlateauVersion *string              `json:"plateauVersion"`
	Year           *int                 `json:"year"`
}

type GenericDataset struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description *string                `json:"description"`
	Year        int                    `json:"year"`
	Groups      []string               `json:"groups"`
	AreaID      string                 `json:"area_id"`
	Area        Area                   `json:"area"`
	TypeID      string                 `json:"type_id"`
	Type        *GenericDatasetType    `json:"type"`
	Data        []*GenericDatasetDatum `json:"data"`
}

func (GenericDataset) IsDataset() {}
func (GenericDataset) IsNode()    {}

type GenericDatasetDatum struct {
	ID       string          `json:"id"`
	Format   DatasetFormat   `json:"format"`
	Name     string          `json:"name"`
	URL      string          `json:"url"`
	Layers   []string        `json:"layers"`
	ParentID string          `json:"parent_id"`
	Parent   *GenericDataset `json:"parent"`
}

func (GenericDatasetDatum) IsDatasetDatum() {}
func (GenericDatasetDatum) IsNode()         {}

type GenericDatasetType struct {
	ID          string              `json:"id"`
	Code        string              `json:"code"`
	Name        string              `json:"name"`
	EnglishName string              `json:"englishName"`
	Category    DatasetTypeCategory `json:"category"`
}

func (GenericDatasetType) IsDatasetType() {}
func (GenericDatasetType) IsNode()        {}

type Municipality struct {
	ID         string      `json:"id"`
	Code       string      `json:"code"`
	Name       string      `json:"name"`
	Parents    []Area      `json:"parents"`
	Prefecture *Prefecture `json:"prefecture"`
	Datasets   []Dataset   `json:"datasets"`
}

func (Municipality) IsArea() {}
func (Municipality) IsNode() {}

type PlateauAuxiliaryDataset struct {
	ID          string                          `json:"id"`
	Name        string                          `json:"name"`
	Description *string                         `json:"description"`
	Year        int                             `json:"year"`
	Groups      []string                        `json:"groups"`
	AreaID      string                          `json:"area_id"`
	Area        Area                            `json:"area"`
	TypeID      string                          `json:"type_id"`
	Type        *PlateauAuxiliaryDatasetType    `json:"type"`
	Data        []*PlateauAuxiliaryDatasetDatum `json:"data"`
}

func (PlateauAuxiliaryDataset) IsDataset() {}
func (PlateauAuxiliaryDataset) IsNode()    {}

type PlateauAuxiliaryDatasetDatum struct {
	ID       string                   `json:"id"`
	Format   DatasetFormat            `json:"format"`
	Name     string                   `json:"name"`
	URL      string                   `json:"url"`
	Layers   []string                 `json:"layers"`
	ParentID string                   `json:"parent_id"`
	Parent   *PlateauAuxiliaryDataset `json:"parent"`
}

func (PlateauAuxiliaryDatasetDatum) IsDatasetDatum() {}
func (PlateauAuxiliaryDatasetDatum) IsNode()         {}

type PlateauAuxiliaryDatasetType struct {
	ID          string              `json:"id"`
	Code        string              `json:"code"`
	Name        string              `json:"name"`
	EnglishName string              `json:"englishName"`
	Category    DatasetTypeCategory `json:"category"`
}

func (PlateauAuxiliaryDatasetType) IsDatasetType() {}
func (PlateauAuxiliaryDatasetType) IsNode()        {}

type PlateauDataset struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description *string                `json:"description"`
	Year        int                    `json:"year"`
	Groups      []string               `json:"groups"`
	AreaID      string                 `json:"area_id"`
	Area        Area                   `json:"area"`
	TypeID      string                 `json:"type_id"`
	Type        *PlateauDatasetType    `json:"type"`
	Data        []*PlateauDatasetDatum `json:"data"`
}

func (PlateauDataset) IsDataset() {}
func (PlateauDataset) IsNode()    {}

type PlateauDatasetDatum struct {
	ID       string          `json:"id"`
	Format   DatasetFormat   `json:"format"`
	Name     string          `json:"name"`
	URL      string          `json:"url"`
	Layers   []string        `json:"layers"`
	ParentID string          `json:"parent_id"`
	Parent   *PlateauDataset `json:"parent"`
	Lod      float64         `json:"lod"`
	Textured bool            `json:"textured"`
}

func (PlateauDatasetDatum) IsDatasetDatum() {}
func (PlateauDatasetDatum) IsNode()         {}

type PlateauDatasetType struct {
	ID             string              `json:"id"`
	Code           string              `json:"code"`
	Name           string              `json:"name"`
	EnglishName    string              `json:"englishName"`
	Category       DatasetTypeCategory `json:"category"`
	PlateauVersion string              `json:"plateauVersion"`
	Year           int                 `json:"year"`
}

func (PlateauDatasetType) IsDatasetType() {}
func (PlateauDatasetType) IsNode()        {}

type Prefecture struct {
	ID             string          `json:"id"`
	Code           string          `json:"code"`
	Name           string          `json:"name"`
	Parents        []Area          `json:"parents"`
	Municipalities []*Municipality `json:"municipalities"`
	Datasets       []Dataset       `json:"datasets"`
}

func (Prefecture) IsArea() {}
func (Prefecture) IsNode() {}

type DatasetFormat string

const (
	DatasetFormatCSV           DatasetFormat = "CSV"
	DatasetFormatCzml          DatasetFormat = "CZML"
	DatasetFormatCesium3DTiles DatasetFormat = "Cesium3DTiles"
	DatasetFormatGltf          DatasetFormat = "GLTF"
	DatasetFormatGTFSRelatime  DatasetFormat = "GTFSRelatime"
	DatasetFormatGeoJSON       DatasetFormat = "GeoJSON"
	DatasetFormatMvt           DatasetFormat = "MVT"
	DatasetFormatTms           DatasetFormat = "TMS"
	DatasetFormatTiles         DatasetFormat = "Tiles"
	DatasetFormatWms           DatasetFormat = "WMS"
)

var AllDatasetFormat = []DatasetFormat{
	DatasetFormatCSV,
	DatasetFormatCzml,
	DatasetFormatCesium3DTiles,
	DatasetFormatGltf,
	DatasetFormatGTFSRelatime,
	DatasetFormatGeoJSON,
	DatasetFormatMvt,
	DatasetFormatTms,
	DatasetFormatTiles,
	DatasetFormatWms,
}

func (e DatasetFormat) IsValid() bool {
	switch e {
	case DatasetFormatCSV, DatasetFormatCzml, DatasetFormatCesium3DTiles, DatasetFormatGltf, DatasetFormatGTFSRelatime, DatasetFormatGeoJSON, DatasetFormatMvt, DatasetFormatTms, DatasetFormatTiles, DatasetFormatWms:
		return true
	}
	return false
}

func (e DatasetFormat) String() string {
	return string(e)
}

func (e *DatasetFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetFormat", str)
	}
	return nil
}

func (e DatasetFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DatasetTypeCategory string

const (
	DatasetTypeCategoryPlateau          DatasetTypeCategory = "Plateau"
	DatasetTypeCategoryPlateauAuxiliary DatasetTypeCategory = "PlateauAuxiliary"
	DatasetTypeCategoryGeneric          DatasetTypeCategory = "Generic"
)

var AllDatasetTypeCategory = []DatasetTypeCategory{
	DatasetTypeCategoryPlateau,
	DatasetTypeCategoryPlateauAuxiliary,
	DatasetTypeCategoryGeneric,
}

func (e DatasetTypeCategory) IsValid() bool {
	switch e {
	case DatasetTypeCategoryPlateau, DatasetTypeCategoryPlateauAuxiliary, DatasetTypeCategoryGeneric:
		return true
	}
	return false
}

func (e DatasetTypeCategory) String() string {
	return string(e)
}

func (e *DatasetTypeCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetTypeCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetTypeCategory", str)
	}
	return nil
}

func (e DatasetTypeCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
