// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package plateauapi

import (
	"fmt"
	"io"
	"strconv"
)

type Area interface {
	Node
	IsArea()
}

type Dataset interface {
	Node
	IsDataset()
}

type DatasetItem interface {
	Node
	IsDatasetItem()
}

type DatasetType interface {
	Node
	IsDatasetType()
}

type Node interface {
	IsNode()
}

type AreaQuery struct {
	ParentCode   string   `json:"parentCode"`
	DatasetTypes []string `json:"datasetTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type Country struct {
	ID          string        `json:"id"`
	Code        string        `json:"code"`
	Name        string        `json:"name"`
	Parents     []Area        `json:"parents"`
	Prefectures []*Prefecture `json:"prefectures"`
	Datasets    []Dataset     `json:"datasets"`
}

func (Country) IsArea() {}
func (Country) IsNode() {}

type DatasetForAreaQuery struct {
	ExcludeTypes []string `json:"excludeTypes"`
	IncludeTypes []string `json:"includeTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type DatasetQuery struct {
	AreaCodes    []string `json:"areaCodes"`
	ExcludeTypes []string `json:"excludeTypes"`
	IncludeTypes []string `json:"includeTypes"`
	SearchTokens []string `json:"searchTokens"`
}

type DatasetTypeQuery struct {
	Category    *DatasetTypeCategory `json:"category"`
	PlateauSpec *string              `json:"plateauSpec"`
	Year        *int                 `json:"year"`
}

type GenericDataset struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Subname     *string               `json:"subname"`
	Description *string               `json:"description"`
	Year        int                   `json:"year"`
	Groups      []string              `json:"groups"`
	AreaID      string                `json:"area_id"`
	Area        Area                  `json:"area"`
	TypeID      string                `json:"type_id"`
	Type        *GenericDatasetType   `json:"type"`
	Data        []*GenericDatasetItem `json:"data"`
}

func (GenericDataset) IsDataset() {}
func (GenericDataset) IsNode()    {}

type GenericDatasetItem struct {
	ID       string          `json:"id"`
	Format   DatasetFormat   `json:"format"`
	Name     string          `json:"name"`
	URL      string          `json:"url"`
	Layers   []string        `json:"layers"`
	ParentID string          `json:"parent_id"`
	Parent   *GenericDataset `json:"parent"`
}

func (GenericDatasetItem) IsDatasetItem() {}
func (GenericDatasetItem) IsNode()        {}

type GenericDatasetType struct {
	ID          string              `json:"id"`
	Code        string              `json:"code"`
	Name        string              `json:"name"`
	EnglishName string              `json:"englishName"`
	Category    DatasetTypeCategory `json:"category"`
}

func (GenericDatasetType) IsDatasetType() {}
func (GenericDatasetType) IsNode()        {}

type Municipality struct {
	ID         string      `json:"id"`
	Code       string      `json:"code"`
	Name       string      `json:"name"`
	Parents    []Area      `json:"parents"`
	Prefecture *Prefecture `json:"prefecture"`
	Datasets   []Dataset   `json:"datasets"`
}

func (Municipality) IsArea() {}
func (Municipality) IsNode() {}

type PlateauDataset struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Subname     *string               `json:"subname"`
	Description *string               `json:"description"`
	Year        int                   `json:"year"`
	Groups      []string              `json:"groups"`
	AreaID      string                `json:"area_id"`
	Area        Area                  `json:"area"`
	TypeID      string                `json:"type_id"`
	Type        *PlateauDatasetType   `json:"type"`
	Data        []*PlateauDatasetItem `json:"data"`
}

func (PlateauDataset) IsDataset() {}
func (PlateauDataset) IsNode()    {}

type PlateauDatasetItem struct {
	ID       string          `json:"id"`
	Format   DatasetFormat   `json:"format"`
	Name     string          `json:"name"`
	URL      string          `json:"url"`
	Layers   []string        `json:"layers"`
	ParentID string          `json:"parent_id"`
	Parent   *PlateauDataset `json:"parent"`
	Lod      *float64        `json:"lod"`
	Texture  *Texture        `json:"texture"`
}

func (PlateauDatasetItem) IsDatasetItem() {}
func (PlateauDatasetItem) IsNode()        {}

type PlateauDatasetType struct {
	ID          string              `json:"id"`
	Code        string              `json:"code"`
	Name        string              `json:"name"`
	EnglishName string              `json:"englishName"`
	Category    DatasetTypeCategory `json:"category"`
	PlateauSpec *PlateauSpec        `json:"plateauSpec"`
	Year        int                 `json:"year"`
}

func (PlateauDatasetType) IsDatasetType() {}
func (PlateauDatasetType) IsNode()        {}

type PlateauFloodingDataset struct {
	ID          string                        `json:"id"`
	Name        string                        `json:"name"`
	Subname     *string                       `json:"subname"`
	Description *string                       `json:"description"`
	Year        int                           `json:"year"`
	Groups      []string                      `json:"groups"`
	AreaID      string                        `json:"area_id"`
	Area        Area                          `json:"area"`
	TypeID      string                        `json:"type_id"`
	Type        *PlateauDatasetType           `json:"type"`
	Data        []*PlateauFloodingDatasetItem `json:"data"`
	River       *River                        `json:"river"`
}

func (PlateauFloodingDataset) IsDataset() {}
func (PlateauFloodingDataset) IsNode()    {}

type PlateauFloodingDatasetItem struct {
	ID            string          `json:"id"`
	Format        DatasetFormat   `json:"format"`
	Name          string          `json:"name"`
	URL           string          `json:"url"`
	Layers        []string        `json:"layers"`
	ParentID      string          `json:"parent_id"`
	Parent        *PlateauDataset `json:"parent"`
	FloodingScale FloodingScale   `json:"floodingScale"`
}

func (PlateauFloodingDatasetItem) IsDatasetItem() {}
func (PlateauFloodingDatasetItem) IsNode()        {}

type PlateauSpec struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Year int    `json:"year"`
}

func (PlateauSpec) IsNode() {}

type Prefecture struct {
	ID             string          `json:"id"`
	Code           string          `json:"code"`
	Name           string          `json:"name"`
	Parents        []Area          `json:"parents"`
	Municipalities []*Municipality `json:"municipalities"`
	Datasets       []Dataset       `json:"datasets"`
}

func (Prefecture) IsArea() {}
func (Prefecture) IsNode() {}

type RelatedDataset struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Subname     *string               `json:"subname"`
	Description *string               `json:"description"`
	Year        int                   `json:"year"`
	Groups      []string              `json:"groups"`
	AreaID      string                `json:"area_id"`
	Area        Area                  `json:"area"`
	TypeID      string                `json:"type_id"`
	Type        *RelatedDatasetType   `json:"type"`
	Data        []*RelatedDatasetItem `json:"data"`
}

func (RelatedDataset) IsDataset() {}
func (RelatedDataset) IsNode()    {}

type RelatedDatasetItem struct {
	ID       string          `json:"id"`
	Format   DatasetFormat   `json:"format"`
	Name     string          `json:"name"`
	URL      string          `json:"url"`
	Layers   []string        `json:"layers"`
	ParentID string          `json:"parent_id"`
	Parent   *RelatedDataset `json:"parent"`
}

func (RelatedDatasetItem) IsDatasetItem() {}
func (RelatedDatasetItem) IsNode()        {}

type RelatedDatasetType struct {
	ID          string              `json:"id"`
	Code        string              `json:"code"`
	Name        string              `json:"name"`
	EnglishName string              `json:"englishName"`
	Category    DatasetTypeCategory `json:"category"`
}

func (RelatedDatasetType) IsDatasetType() {}
func (RelatedDatasetType) IsNode()        {}

type River struct {
	Name  string     `json:"name"`
	Admin RiverAdmin `json:"admin"`
}

type DatasetFormat string

const (
	DatasetFormatCSV           DatasetFormat = "CSV"
	DatasetFormatCzml          DatasetFormat = "CZML"
	DatasetFormatCesium3DTiles DatasetFormat = "Cesium3DTiles"
	DatasetFormatGltf          DatasetFormat = "GLTF"
	DatasetFormatGTFSRelatime  DatasetFormat = "GTFSRelatime"
	DatasetFormatGeoJSON       DatasetFormat = "GeoJSON"
	DatasetFormatMvt           DatasetFormat = "MVT"
	DatasetFormatTms           DatasetFormat = "TMS"
	DatasetFormatTiles         DatasetFormat = "Tiles"
	DatasetFormatWms           DatasetFormat = "WMS"
)

var AllDatasetFormat = []DatasetFormat{
	DatasetFormatCSV,
	DatasetFormatCzml,
	DatasetFormatCesium3DTiles,
	DatasetFormatGltf,
	DatasetFormatGTFSRelatime,
	DatasetFormatGeoJSON,
	DatasetFormatMvt,
	DatasetFormatTms,
	DatasetFormatTiles,
	DatasetFormatWms,
}

func (e DatasetFormat) IsValid() bool {
	switch e {
	case DatasetFormatCSV, DatasetFormatCzml, DatasetFormatCesium3DTiles, DatasetFormatGltf, DatasetFormatGTFSRelatime, DatasetFormatGeoJSON, DatasetFormatMvt, DatasetFormatTms, DatasetFormatTiles, DatasetFormatWms:
		return true
	}
	return false
}

func (e DatasetFormat) String() string {
	return string(e)
}

func (e *DatasetFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetFormat", str)
	}
	return nil
}

func (e DatasetFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DatasetTypeCategory string

const (
	DatasetTypeCategoryPlateau DatasetTypeCategory = "Plateau"
	DatasetTypeCategoryRelated DatasetTypeCategory = "Related"
	DatasetTypeCategoryGeneric DatasetTypeCategory = "Generic"
)

var AllDatasetTypeCategory = []DatasetTypeCategory{
	DatasetTypeCategoryPlateau,
	DatasetTypeCategoryRelated,
	DatasetTypeCategoryGeneric,
}

func (e DatasetTypeCategory) IsValid() bool {
	switch e {
	case DatasetTypeCategoryPlateau, DatasetTypeCategoryRelated, DatasetTypeCategoryGeneric:
		return true
	}
	return false
}

func (e DatasetTypeCategory) String() string {
	return string(e)
}

func (e *DatasetTypeCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetTypeCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetTypeCategory", str)
	}
	return nil
}

func (e DatasetTypeCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FloodingScale string

const (
	FloodingScalePlanned         FloodingScale = "PLANNED"
	FloodingScaleExpectedMaximum FloodingScale = "EXPECTED_MAXIMUM"
)

var AllFloodingScale = []FloodingScale{
	FloodingScalePlanned,
	FloodingScaleExpectedMaximum,
}

func (e FloodingScale) IsValid() bool {
	switch e {
	case FloodingScalePlanned, FloodingScaleExpectedMaximum:
		return true
	}
	return false
}

func (e FloodingScale) String() string {
	return string(e)
}

func (e *FloodingScale) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FloodingScale(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FloodingScale", str)
	}
	return nil
}

func (e FloodingScale) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RiverAdmin string

const (
	RiverAdminNation     RiverAdmin = "NATION"
	RiverAdminPrefecture RiverAdmin = "PREFECTURE"
)

var AllRiverAdmin = []RiverAdmin{
	RiverAdminNation,
	RiverAdminPrefecture,
}

func (e RiverAdmin) IsValid() bool {
	switch e {
	case RiverAdminNation, RiverAdminPrefecture:
		return true
	}
	return false
}

func (e RiverAdmin) String() string {
	return string(e)
}

func (e *RiverAdmin) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RiverAdmin(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RiverAdmin", str)
	}
	return nil
}

func (e RiverAdmin) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Texture string

const (
	TextureNone           Texture = "NONE"
	TextureLowResolution  Texture = "LOW_RESOLUTION"
	TextureHighResolution Texture = "HIGH_RESOLUTION"
)

var AllTexture = []Texture{
	TextureNone,
	TextureLowResolution,
	TextureHighResolution,
}

func (e Texture) IsValid() bool {
	switch e {
	case TextureNone, TextureLowResolution, TextureHighResolution:
		return true
	}
	return false
}

func (e Texture) String() string {
	return string(e)
}

func (e *Texture) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Texture(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Texture", str)
	}
	return nil
}

func (e Texture) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
