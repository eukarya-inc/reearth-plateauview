// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package plateauapi

import (
	"fmt"
	"io"
	"strconv"
)

type Area interface {
	Node
	IsArea()
}

type Dataset interface {
	Node
	IsDataset()
}

type DatasetDatum interface {
	Node
	IsDatasetDatum()
}

type Node interface {
	IsNode()
}

type Country struct {
	ID          string        `json:"id"`
	Code        string        `json:"code"`
	Name        string        `json:"name"`
	Parents     []Area        `json:"parents"`
	Type        AreaType      `json:"type"`
	Prefectures []*Prefecture `json:"prefectures"`
	Datasets    []Dataset     `json:"datasets"`
}

func (Country) IsArea() {}
func (Country) IsNode() {}

type DatasetForAreaQuery struct {
	ExcludeTypes []DatasetType `json:"excludeTypes"`
	IncludeTypes []DatasetType `json:"includeTypes"`
	SearchTokens []string      `json:"searchTokens"`
}

type DatasetQuery struct {
	ExcludeTypes []DatasetType `json:"excludeTypes"`
	IncludeTypes []DatasetType `json:"includeTypes"`
	AreaCodes    []string      `json:"areaCodes"`
	SearchTokens []string      `json:"searchTokens"`
}

type GenericDataset struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description *string                `json:"description"`
	Year        int                    `json:"year"`
	Groups      []string               `json:"groups"`
	Area        Area                   `json:"area"`
	Data        []*GenericDatasetDatum `json:"data"`
	TypeName    string                 `json:"typeName"`
}

func (GenericDataset) IsDataset() {}
func (GenericDataset) IsNode()    {}

type GenericDatasetDatum struct {
	ID     string        `json:"id"`
	Format DatasetFormat `json:"format"`
	Name   string        `json:"name"`
	URL    string        `json:"url"`
	Layers []string      `json:"layers"`
}

func (GenericDatasetDatum) IsDatasetDatum() {}
func (GenericDatasetDatum) IsNode()         {}

type Municipality struct {
	ID         string      `json:"id"`
	Code       string      `json:"code"`
	Name       string      `json:"name"`
	Parents    []Area      `json:"parents"`
	Type       AreaType    `json:"type"`
	Prefecture *Prefecture `json:"prefecture"`
	Datasets   []Dataset   `json:"datasets"`
}

func (Municipality) IsArea() {}
func (Municipality) IsNode() {}

type PlateauAuxiliaryDataset struct {
	ID          string                          `json:"id"`
	Name        string                          `json:"name"`
	Description *string                         `json:"description"`
	Year        int                             `json:"year"`
	Groups      []string                        `json:"groups"`
	Area        Area                            `json:"area"`
	Data        []*PlateauAuxiliaryDatasetDatum `json:"data"`
	Type        DatasetType                     `json:"type"`
	TypeName    string                          `json:"typeName"`
}

func (PlateauAuxiliaryDataset) IsDataset() {}
func (PlateauAuxiliaryDataset) IsNode()    {}

type PlateauAuxiliaryDatasetDatum struct {
	ID     string        `json:"id"`
	Format DatasetFormat `json:"format"`
	Name   string        `json:"name"`
	URL    string        `json:"url"`
	Layers []string      `json:"layers"`
}

func (PlateauAuxiliaryDatasetDatum) IsDatasetDatum() {}
func (PlateauAuxiliaryDatasetDatum) IsNode()         {}

type PlateauDataset struct {
	ID          string                 `json:"id"`
	Name        string                 `json:"name"`
	Description *string                `json:"description"`
	Year        int                    `json:"year"`
	Groups      []string               `json:"groups"`
	Area        Area                   `json:"area"`
	Data        []*PlateauDatasetDatum `json:"data"`
	Type        DatasetType            `json:"type"`
}

func (PlateauDataset) IsDataset() {}
func (PlateauDataset) IsNode()    {}

type PlateauDatasetDatum struct {
	ID       string        `json:"id"`
	Format   DatasetFormat `json:"format"`
	Name     string        `json:"name"`
	URL      string        `json:"url"`
	Layers   []string      `json:"layers"`
	Lod      float64       `json:"lod"`
	Textured bool          `json:"textured"`
	Version  string        `json:"version"`
}

func (PlateauDatasetDatum) IsDatasetDatum() {}
func (PlateauDatasetDatum) IsNode()         {}

type Prefecture struct {
	ID             string          `json:"id"`
	Code           string          `json:"code"`
	Name           string          `json:"name"`
	Parents        []Area          `json:"parents"`
	Type           AreaType        `json:"type"`
	Municipalities []*Municipality `json:"municipalities"`
	Datasets       []Dataset       `json:"datasets"`
}

func (Prefecture) IsArea() {}
func (Prefecture) IsNode() {}

type AreaType string

const (
	AreaTypeMunicipality AreaType = "Municipality"
	AreaTypePrefecture   AreaType = "Prefecture"
)

var AllAreaType = []AreaType{
	AreaTypeMunicipality,
	AreaTypePrefecture,
}

func (e AreaType) IsValid() bool {
	switch e {
	case AreaTypeMunicipality, AreaTypePrefecture:
		return true
	}
	return false
}

func (e AreaType) String() string {
	return string(e)
}

func (e *AreaType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AreaType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AreaType", str)
	}
	return nil
}

func (e AreaType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DatasetFormat string

const (
	DatasetFormatCSV           DatasetFormat = "CSV"
	DatasetFormatCzml          DatasetFormat = "CZML"
	DatasetFormatCesium3DTiles DatasetFormat = "Cesium3DTiles"
	DatasetFormatGltf          DatasetFormat = "GLTF"
	DatasetFormatGTFSRelatime  DatasetFormat = "GTFSRelatime"
	DatasetFormatGeoJSON       DatasetFormat = "GeoJSON"
	DatasetFormatMvt           DatasetFormat = "MVT"
	DatasetFormatTms           DatasetFormat = "TMS"
	DatasetFormatTiles         DatasetFormat = "Tiles"
	DatasetFormatWms           DatasetFormat = "WMS"
)

var AllDatasetFormat = []DatasetFormat{
	DatasetFormatCSV,
	DatasetFormatCzml,
	DatasetFormatCesium3DTiles,
	DatasetFormatGltf,
	DatasetFormatGTFSRelatime,
	DatasetFormatGeoJSON,
	DatasetFormatMvt,
	DatasetFormatTms,
	DatasetFormatTiles,
	DatasetFormatWms,
}

func (e DatasetFormat) IsValid() bool {
	switch e {
	case DatasetFormatCSV, DatasetFormatCzml, DatasetFormatCesium3DTiles, DatasetFormatGltf, DatasetFormatGTFSRelatime, DatasetFormatGeoJSON, DatasetFormatMvt, DatasetFormatTms, DatasetFormatTiles, DatasetFormatWms:
		return true
	}
	return false
}

func (e DatasetFormat) String() string {
	return string(e)
}

func (e *DatasetFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetFormat", str)
	}
	return nil
}

func (e DatasetFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DatasetType string

const (
	DatasetTypeBridge             DatasetType = "Bridge"
	DatasetTypeBuilding           DatasetType = "Building"
	DatasetTypeCityFurniture      DatasetType = "CityFurniture"
	DatasetTypeGenericCityObject  DatasetType = "GenericCityObject"
	DatasetTypeHighTideRisk       DatasetType = "HighTideRisk"
	DatasetTypeInlandFloodingRisk DatasetType = "InlandFloodingRisk"
	DatasetTypeLandSlideRisk      DatasetType = "LandSlideRisk"
	DatasetTypeLandUse            DatasetType = "LandUse"
	DatasetTypeRiverFloodingRisk  DatasetType = "RiverFloodingRisk"
	DatasetTypeRoad               DatasetType = "Road"
	DatasetTypeTsunamiRisk        DatasetType = "TsunamiRisk"
	DatasetTypeUrbanPlanning      DatasetType = "UrbanPlanning"
	DatasetTypeVegetation         DatasetType = "Vegetation"
)

var AllDatasetType = []DatasetType{
	DatasetTypeBridge,
	DatasetTypeBuilding,
	DatasetTypeCityFurniture,
	DatasetTypeGenericCityObject,
	DatasetTypeHighTideRisk,
	DatasetTypeInlandFloodingRisk,
	DatasetTypeLandSlideRisk,
	DatasetTypeLandUse,
	DatasetTypeRiverFloodingRisk,
	DatasetTypeRoad,
	DatasetTypeTsunamiRisk,
	DatasetTypeUrbanPlanning,
	DatasetTypeVegetation,
}

func (e DatasetType) IsValid() bool {
	switch e {
	case DatasetTypeBridge, DatasetTypeBuilding, DatasetTypeCityFurniture, DatasetTypeGenericCityObject, DatasetTypeHighTideRisk, DatasetTypeInlandFloodingRisk, DatasetTypeLandSlideRisk, DatasetTypeLandUse, DatasetTypeRiverFloodingRisk, DatasetTypeRoad, DatasetTypeTsunamiRisk, DatasetTypeUrbanPlanning, DatasetTypeVegetation:
		return true
	}
	return false
}

func (e DatasetType) String() string {
	return string(e)
}

func (e *DatasetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DatasetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DatasetType", str)
	}
	return nil
}

func (e DatasetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PlateauAuxiliaryDatasetType string

const (
	PlateauAuxiliaryDatasetTypeBorder         PlateauAuxiliaryDatasetType = "Border"
	PlateauAuxiliaryDatasetTypeEmergencyRoute PlateauAuxiliaryDatasetType = "EmergencyRoute"
	PlateauAuxiliaryDatasetTypeLandmark       PlateauAuxiliaryDatasetType = "Landmark"
	PlateauAuxiliaryDatasetTypePark           PlateauAuxiliaryDatasetType = "Park"
	PlateauAuxiliaryDatasetTypeRailway        PlateauAuxiliaryDatasetType = "Railway"
	PlateauAuxiliaryDatasetTypeShelter        PlateauAuxiliaryDatasetType = "Shelter"
	PlateauAuxiliaryDatasetTypeStation        PlateauAuxiliaryDatasetType = "Station"
)

var AllPlateauAuxiliaryDatasetType = []PlateauAuxiliaryDatasetType{
	PlateauAuxiliaryDatasetTypeBorder,
	PlateauAuxiliaryDatasetTypeEmergencyRoute,
	PlateauAuxiliaryDatasetTypeLandmark,
	PlateauAuxiliaryDatasetTypePark,
	PlateauAuxiliaryDatasetTypeRailway,
	PlateauAuxiliaryDatasetTypeShelter,
	PlateauAuxiliaryDatasetTypeStation,
}

func (e PlateauAuxiliaryDatasetType) IsValid() bool {
	switch e {
	case PlateauAuxiliaryDatasetTypeBorder, PlateauAuxiliaryDatasetTypeEmergencyRoute, PlateauAuxiliaryDatasetTypeLandmark, PlateauAuxiliaryDatasetTypePark, PlateauAuxiliaryDatasetTypeRailway, PlateauAuxiliaryDatasetTypeShelter, PlateauAuxiliaryDatasetTypeStation:
		return true
	}
	return false
}

func (e PlateauAuxiliaryDatasetType) String() string {
	return string(e)
}

func (e *PlateauAuxiliaryDatasetType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PlateauAuxiliaryDatasetType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PlateauAuxiliaryDatasetType", str)
	}
	return nil
}

func (e PlateauAuxiliaryDatasetType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
